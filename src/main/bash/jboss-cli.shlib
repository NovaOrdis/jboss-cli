#!/bin/bash
#
# functions that build dynamically the class path using JARs deployed within the specified JBoss installation
#

#
# Build the classpath fragment required by the CLI wrapper to work using JARs deployed within the specified JBoss
# installation. If it successful, return the classpath fragment at stdout and returns 0. If not, it sends an error
# message at stderr and returns 1.
#
function get-jboss-cli-classpath() {

    local jboss_home=$1
    [ -z "${jboss_home}" ] && { echo "[error]: 'jboss_home' not provided" 1>&2; return 1; }
    [ -d ${jboss_home} ] || { echo "[error]: jboss_home ${jboss_home} does not exist" 1>&2; return 1; }

    local jboss_modules_jar=${jboss_home}/jboss-modules.jar
    [ -f ${jboss_modules_jar} ] || { echo "[error]: ${jboss_modules_jar} not found" 1>&2; return 1; }

    local classpath=${jboss_modules_jar}

    local dependencies="jboss-as-cli slf4j-api jboss-logging staxmapper"

    for i in ${dependencies}; do
        local classpath_element
        classpath_element=$(locate-newest-jar ${jboss_home} ${i}) || return 1
        classpath=${classpath}:${classpath_element}
    done

    echo "${classpath}"
    return 0
}

#
# writes the newest JAR path that matches the base name at stdout, or returns 1 if no such JAR is found.
#
function locate-newest-jar() {

    local jboss_home=$1
    [ -z "${jboss_home}" ] && { echo "[error]: 'jboss_home' not provided" 1>&2; return 1; }
    [ -d ${jboss_home} ] || { echo "[error]: jboss_home ${jboss_home} does not exist" 1>&2; return 1; }

    local jar_base_name=$2
    [ -z "${jar_base_name}" ] && { echo "[error]: 'jar_base_name' not provided" 1>&2; return 1; }

    local module_dir=${jboss_home}/modules
    [ -d ${module_dir} ] || { echo "[error]: the module directory ${module_dir} does not exist" 1>&2; return 1; }

    local newest_jar_path
    local newest_jar_basename
    for i in $(find ${module_dir} -name ${jar_base_name}-*); do
        local current_basename
        current_basename=$(basename ${i})
        if [[ "${current_basename}" > "${newest_jar_basename}" ]]; then
            newest_jar_basename=${current_basename}
            newest_jar_path=${i}
        fi
    done

    [ -z "${newest_jar_path}" ] && \
        { echo "[error]: no JAR with a name starting with '${jar_base_name}' found in ${module_dir}" 1>&2; return 1; }

    echo ${newest_jar_path}
}